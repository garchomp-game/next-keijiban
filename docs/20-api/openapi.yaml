openapi: 3.0.3
info:
  title: Realtime Board API (Flask)
  version: 0.1.0
servers:
  - url: http://localhost:5000
paths:
  /auth/signup:
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, displayName]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                displayName: { type: string, minLength: 1 }
      responses:
        '201': { description: Created }
        '400': { description: Bad Request }
  /auth/login:
    post:
      summary: Login and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
        '401': { description: Unauthorized }
  /rooms:
    get:
      summary: List rooms
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
    post:
      summary: Create room
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string, minLength: 1 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
  /rooms/{roomId}/messages:
    get:
      summary: List messages in a room
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      summary: Create message in a room
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: roomId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body]
              properties:
                body: { type: string, minLength: 1, maxLength: 4000 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        displayName: { type: string }
        createdAt: { type: string, format: date-time }
    Room:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        createdAt: { type: string, format: date-time }
    Message:
      type: object
      properties:
        id: { type: string }
        roomId: { type: string }
        userId: { type: string }
        body: { type: string }
        createdAt: { type: string, format: date-time }
        editedAt: { type: string, format: date-time, nullable: true }
