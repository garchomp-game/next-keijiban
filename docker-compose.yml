version: "3.8"
services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: keijiban
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    env_file:
      - backend/.env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://postgres:postgres@postgres:5432/keijiban}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      FLASK_ENV: development
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: ["/entrypoint.sh"]

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:5000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-http://localhost:5000/ws}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    command: ["sh", "-lc", "[ -d node_modules ] || npm ci; npm run dev"]

volumes:
  pgdata: {}
  frontend_node_modules: {}
