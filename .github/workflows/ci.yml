name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            tests/package-lock.json
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - run: cp backend/.env.example backend/.env
      - run: cp frontend/.env.local.example frontend/.env.local
      - run: npm ci
      - run: npm --prefix tests ci
      - run: npx --prefix tests playwright install --with-deps
      - run: pip install -r backend/requirements.txt
      - run: docker compose up -d
      - name: Wait for services (frontend and backend)
        run: |
          echo "Waiting for services to start..."
          for i in {1..90}; do
            # Check backend health endpoint
            if curl -fsS http://localhost:5000/healthz >/dev/null 2>&1; then
              echo "Backend is up"
              # Check frontend (any response from Next.js)
              if curl -fsS http://localhost:3000 >/dev/null 2>&1; then
                echo "Frontend is up"
                echo "All services are ready!"
                exit 0
              fi
            fi
            echo "Waiting for services... ($i/90) - Backend: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/healthz 2>/dev/null || echo "down"), Frontend: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 2>/dev/null || echo "down")"
            sleep 3
          done
          echo "Services did not become ready in time"
          echo "Final status check:"
          echo "Backend logs:"
          docker compose logs backend
          echo "Frontend logs:"
          docker compose logs frontend
          exit 1
      - run: npm run lint
      - run: npm run typecheck
      - run: pytest
      - run: npm run e2e
      - run: npm run smoke
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            tests/test-results
            tests/playwright-report
